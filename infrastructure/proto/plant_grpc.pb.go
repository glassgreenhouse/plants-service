// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlantsClient is the client API for Plants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantsClient interface {
	NewPlant(ctx context.Context, in *NewPlantRequest, opts ...grpc.CallOption) (*Plant, error)
	GetPlant(ctx context.Context, in *GetPlantRequest, opts ...grpc.CallOption) (*Plant, error)
}

type plantsClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantsClient(cc grpc.ClientConnInterface) PlantsClient {
	return &plantsClient{cc}
}

func (c *plantsClient) NewPlant(ctx context.Context, in *NewPlantRequest, opts ...grpc.CallOption) (*Plant, error) {
	out := new(Plant)
	err := c.cc.Invoke(ctx, "/Plants/NewPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsClient) GetPlant(ctx context.Context, in *GetPlantRequest, opts ...grpc.CallOption) (*Plant, error) {
	out := new(Plant)
	err := c.cc.Invoke(ctx, "/Plants/GetPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantsServer is the server API for Plants service.
// All implementations must embed UnimplementedPlantsServer
// for forward compatibility
type PlantsServer interface {
	NewPlant(context.Context, *NewPlantRequest) (*Plant, error)
	GetPlant(context.Context, *GetPlantRequest) (*Plant, error)
	mustEmbedUnimplementedPlantsServer()
}

// UnimplementedPlantsServer must be embedded to have forward compatible implementations.
type UnimplementedPlantsServer struct {
}

func (UnimplementedPlantsServer) NewPlant(context.Context, *NewPlantRequest) (*Plant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPlant not implemented")
}
func (UnimplementedPlantsServer) GetPlant(context.Context, *GetPlantRequest) (*Plant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlant not implemented")
}
func (UnimplementedPlantsServer) mustEmbedUnimplementedPlantsServer() {}

// UnsafePlantsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantsServer will
// result in compilation errors.
type UnsafePlantsServer interface {
	mustEmbedUnimplementedPlantsServer()
}

func RegisterPlantsServer(s grpc.ServiceRegistrar, srv PlantsServer) {
	s.RegisterService(&Plants_ServiceDesc, srv)
}

func _Plants_NewPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServer).NewPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plants/NewPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServer).NewPlant(ctx, req.(*NewPlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plants_GetPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServer).GetPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plants/GetPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServer).GetPlant(ctx, req.(*GetPlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plants_ServiceDesc is the grpc.ServiceDesc for Plants service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plants_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Plants",
	HandlerType: (*PlantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewPlant",
			Handler:    _Plants_NewPlant_Handler,
		},
		{
			MethodName: "GetPlant",
			Handler:    _Plants_GetPlant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plant.proto",
}
